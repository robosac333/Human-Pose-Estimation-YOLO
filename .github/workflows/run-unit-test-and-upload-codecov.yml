##############################################################################
#
# GitGub CI workflow syntax spec:
#    https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions
#
# CodeCov github action setup:
#    https://github.com/codecov/codecov-action
#
# CodeCov badge setup:
#    https://docs.codecov.com/docs/status-badges
#
# version 1.1
##############################################################################

name: Run Unit Test and Upload Coverage Report

on:
  # Triggered whenever push to main 
  push:
    branches: [ "main" ]

  # Triggered whenever a pull request is created on main
  pull_request:
    branches: [ "main" ]
    types: [opened]

  # Allow manual trigger
  workflow_dispatch:

jobs:
  build-run-upload:
    # Create a container of the latest Ubuntu, other values could be
    # ubuntu-latest, ubuntu-22.04, etc.
    runs-on: ubuntu-22.04
    
    steps:
      # We want to use GitHub CI checkout version 3 to check out our branch
      - uses: actions/checkout@v3


      # Cache apt packages
      - name: Cache apt packages
        uses: actions/cache@v3
        id: apt-cache
        with:
          path: /var/cache/apt/archives
          key: ${{ runner.os }}-apt-${{ hashFiles('**/package-lock.json') }}

      # Cache OpenCV build
      - name: Cache OpenCV
        id: opencv-cache
        uses: actions/cache@v3
        with:
          path: |
            /usr/local/include/opencv4
            /usr/local/lib/libopencv*
            /usr/local/lib/python3/dist-packages/cv2
          key: ${{ runner.os }}-opencv-4.5.4-${{ hashFiles('**/CMakeLists.txt') }}

      # Install some system pacakges
      - name: Install build packages and dependencies
        run: |
          sudo apt update
          sudo apt install -y software-properties-common
          sudo apt install -y doxygen lcov gcovr
          sudo apt install -y libopencv-dev python3-opencv

      # Download and build OpenCV 4.5.4
      - name: Build and Install OpenCV 4.5.4
        run: |
          # Download OpenCV 4.5.4
          wget -O opencv.zip https://github.com/opencv/opencv/archive/4.5.4.zip
          unzip opencv.zip
          # Download OpenCV contrib modules
          wget -O opencv_contrib.zip https://github.com/opencv/opencv_contrib/archive/4.5.4.zip
          unzip opencv_contrib.zip
          # Create build directory
          cd opencv-4.5.4
          mkdir build
          cd build
          # Configure OpenCV build
          cmake -D CMAKE_BUILD_TYPE=RELEASE \
                -D CMAKE_INSTALL_PREFIX=/usr/local \
                -D INSTALL_PYTHON_EXAMPLES=OFF \
                -D INSTALL_C_EXAMPLES=OFF \
                -D OPENCV_ENABLE_NONFREE=ON \
                -D OPENCV_EXTRA_MODULES_PATH=../../opencv_contrib-4.5.4/modules \
                -D PYTHON_EXECUTABLE=/usr/bin/python3 \
                -D BUILD_EXAMPLES=OFF ..
          # Build and install
          make -j$(nproc)
          sudo make install
          sudo ldconfig
          
      # Verify OpenCV 4.5.4 installation
      - name: Verify OpenCV installation
        run: |
          pkg-config --modversion opencv4
          python3 -c "import cv2; print('OpenCV version:', cv2.__version__)"
      
      - name: Download YOLO files
        run: |
          cd yolo_classes
          # Download weights
          wget https://pjreddie.com/media/files/yolov3.weights
          # Verify file exists
          ls -l yolov3.weights

      # Build, run unit test, and generate coverage report
      - name: Configure CMake flags and build exectables
        run: |
          cmake -D WANT_COVERAGE=ON -D CMAKE_BUILD_TYPE=Debug -S ./ -B build/
          cmake --build build/ --clean-first --target all test_coverage

      # Upload coverage result to CodeCov
      - name: Upload coverage result to CodeCov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }} # not required for public repos
          files: ${{github.workspace}}/build/test_coverage.info
          fail_ci_if_error: true # optional (default = false)
          verbose: true # optional (default = false)      
          