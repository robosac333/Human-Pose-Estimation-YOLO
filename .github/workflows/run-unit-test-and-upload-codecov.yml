name: Run Unit Test and Upload Coverage Report

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
    types: [opened]
  workflow_dispatch:

jobs:
  build-run-upload:
    runs-on: ubuntu-22.04
    
    steps:
      - uses: actions/checkout@v3
        with:
          lfs: true  # Enable LFS for weights file

      # Install system packages
      - name: Install build packages and dependencies
        run: |
          sudo apt update
          sudo apt install -y software-properties-common
          sudo apt install -y doxygen lcov gcovr
          sudo apt install -y libopencv-dev python3-opencv

      # Build OpenCV
      - name: Build and Install OpenCV 4.5.4
        run: |
          mkdir -p ~/.cache/opencv
          cd ~/.cache/opencv
          wget -O opencv.zip https://github.com/opencv/opencv/archive/4.5.4.zip
          wget -O opencv_contrib.zip https://github.com/opencv/opencv_contrib/archive/4.5.4.zip
          unzip -o opencv.zip
          unzip -o opencv_contrib.zip
          cd opencv-4.5.4
          mkdir -p build
          cd build
          cmake -D CMAKE_BUILD_TYPE=RELEASE \
                -D CMAKE_INSTALL_PREFIX=/usr/local \
                -D INSTALL_PYTHON_EXAMPLES=OFF \
                -D INSTALL_C_EXAMPLES=OFF \
                -D OPENCV_ENABLE_NONFREE=ON \
                -D OPENCV_EXTRA_MODULES_PATH=../../opencv_contrib-4.5.4/modules \
                -D PYTHON_EXECUTABLE=/usr/bin/python3 \
                -D BUILD_EXAMPLES=OFF ..
          make -j$(nproc)
          sudo make install
          sudo ldconfig

      # Download YOLO files
      - name: Download YOLO files
        run: |
          cd yolo_classes
          wget https://pjreddie.com/media/files/yolov3.weights
          ls -l yolov3.weights

      - name: Verify OpenCV installation
        run: |
          pkg-config --modversion opencv4
          python3 -c "import cv2; print('OpenCV version:', cv2.__version__)"

      # Configure and build
      - name: Configure CMake flags and build executables
        run: |
          cmake -D WANT_COVERAGE=ON -D CMAKE_BUILD_TYPE=Debug -S ./ -B build/
          cmake --build build/ --clean-first --target all

      - name: Debug file locations
        run: |
          echo "Project structure:"
          ls -R
          echo "YOLO files location:"
          find . -name "yolov3*"
          find . -name "coco.names"
          echo "Build directory content:"
          ls -R build/

      # Run tests
      - name: Run tests with verbose output
        run: |
          cd build
          GTEST_COLOR=1 ctest --output-on-failure --verbose

      # Generate coverage
      - name: Generate coverage report
        run: |
          cd build
          make test_coverage

      # Upload coverage results
      - name: Upload coverage result to CodeCov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ${{github.workspace}}/build/test_coverage.info
          fail_ci_if_error: true
          verbose: true